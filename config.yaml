pipeline:
  class: sklearn.pipeline.Pipeline
  params:
    steps:
      - name: data_pipe
        class: sklearn.pipeline.Pipeline
        params:
          steps:
            - name: preprocessor
              class: sklearn.compose.ColumnTransformer
              params:
                transformers:
                  - name: num
                    class: sklearn.pipeline.Pipeline
                    columns: ['Age', 'SibSp', 'Parch', 'Fare']
                    params:
                      steps:
                        - name: imputer
                          class: sklearn.impute.SimpleImputer
                          params:
                            strategy: most_frequent
                        - name: scaler
                          class: sklearn.preprocessing.StandardScaler
                          params: {}
                  - name: cat
                    class: sklearn.pipeline.Pipeline
                    columns: ['Pclass', 'Sex', 'Embarked']
                    params:
                      steps:
                        - name: imputer
                          class: sklearn.impute.SimpleImputer
                          params:
                            strategy: most_frequent
                        - name: encoder
                          class: sklearn.preprocessing.OneHotEncoder
                          params: {}
            - name: feature_selector
              class: sklearn.feature_selection.SelectKBest
              params:
                k: 'all'

      - name: classifier
        class: sklearn.linear_model.LogisticRegression
        params:
          C: 1.0
          solver: lbfgs
          max_iter: 1000

search_parameters:
  - data_pipe__preprocessor__num__imputer__strategy: ['mean', 'median']
  - data_pipe__preprocessor__num__scaler:
      - null
      - class: sklearn.preprocessing.StandardScaler
        params: {}
      - class: sklearn.preprocessing.MinMaxScaler
        params: {}
  - data_pipe__preprocessor__cat__imputer__strategy: ['most_frequent', 'median']
  - data_pipe__feature_selector__k: [1, 2, 3, 4, 5, 6, 7]
  - classifier:
      - class: sklearn.linear_model.LogisticRegression
        params: {}
    classifier__C: [0.1, 1, 10]
    classifier__solver: ['lbfgs', 'liblinear', 'sag', 'saga']
  - classifier:
      - class: sklearn.ensemble.RandomForestClassifier
        params: {}
    classifier__max_depth: [5, 10, None]
